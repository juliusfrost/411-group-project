Happy path:

* User chooses to host a session
* User will be presented with the necessary form for the session by the form handler
* Once the user enters necessary information in the form, they can submit the form
* This will call a function that will parse the request and pull out the relevant information
* This information will be passed on to a function in the session handler that will generate a new session object
* The new session object will be given a newly generated id and will store the time frame, location, and the user id as host
* The session relation of the database will be updated with this new session.
* A call will be made to the Google calendar API to get calendar events.
* Events will be parsed to build availability.
* The user profile relation of the database will be updated by either adding the new user or updating if the user was already in the database.
* The user will have their personal information as well as the session id they belong to stored in the database
* Then user will then be redirected to the session page.

What could go wrong:

* Generated session ID is not unique
    * Until a unique ID is generated, keep generating a new one
    * Time this process out if it takes too long and do not create the session.

* User OAuth token is expired and cannot make call to calendar API
    * Check if token is expired, and refresh it using the user's refresh token
